{"version":3,"sources":["../src/scroll-up.js"],"names":["ScrollUpResolver","Selectors","Data","DataDefault","Events","SCROLL_UP","Resolver","NAMESPACE","SCROLL_UP_OFF","DOM_CONTENT_LOADED","_Resolver","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_createClass","key","value","lastMetric","crtMetric","lastTop","top","crtTop","_createEvent","get","type","document","documentMode","event","createEvent","initEvent","Event","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","subscriber","toggleClass","dataset","addEventListener","classList","add","remove","_iterator","querySelectorAll","Symbol","iterator","next","done","err","return","_inherits","window","Monitor","registerResolver","_initByData"],"mappings":";;;;;gzCAUA,IAAMA,iBAAoB,WAExB,IAEMC,EACe,8BAGfC,EACU,gBAGVC,EACU,YAGVC,EAAS,CACbC,UAAAA,aAAAA,OAAwBC,SAASC,WACjCC,cAAAA,iBAAAA,OAAgCF,SAASC,WACzCE,mBAAoB,oBAGhBT,EAtBwB,SAAAU,GAAA,SAAAV,IAAA,OAAAW,gBAAAC,KAAAZ,GAAAa,2BAAAD,KAAAE,gBAAAd,GAAAe,MAAAH,KAAAI,YAAA,OAAAC,aAAAjB,EAAA,CAAA,CAAAkB,IAAA,UAAAC,MAAA,SA0DpBC,EAAYC,GAClB,IAAIC,EAAUF,EAAWG,IACrBC,EAASH,EAAUE,IACvB,OACSvB,EAAiByB,aADtBD,EAASF,EAC0BlB,EAAOC,UAEPD,EAAOI,iBAhEpB,CAAAU,IAAA,aAAAQ,IAAA,WA6B1B,MAAO,CAACtB,EAAOC,UAAWD,EAAOI,kBA7BP,CAAA,CAAAU,IAAA,eAAAC,MAAA,SAgCRQ,GAClB,GAAIC,SAASC,aAAc,CACzB,IAAMC,EAAQF,SAASG,YAAY,SAEnC,OADAD,EAAME,UAAUL,GAAM,GAAO,GACtBG,EAEP,OAAO,IAAIG,MAAMN,KAtCO,CAAAT,IAAA,cAAAC,MAAA,WA8CP,IAAAe,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACnB,IADmB,IACnBC,EADmBC,EAAA,WAAA,IACRC,EADQF,EAAAnB,MAEXsB,EAAcD,EAAWE,QAAQxC,IAAsBC,EAC7DqC,EAAWG,iBAAiBvC,EAAOC,UAAW,WAC5CmC,EAAWI,UAAUC,IAAIJ,KAE3BD,EAAWG,iBAAiBvC,EAAOI,cAAe,WAChDgC,EAAWI,UAAUE,OAAOL,MANhCM,EAAyBnB,SAASoB,iBAAiB/C,GAAnDgD,OAAAC,cAAAhB,GAAAI,EAAAS,EAAAI,QAAAC,MAAAlB,GAAA,EAAiFK,IAD9D,MAAAc,GAAAlB,GAAA,EAAAC,EAAAiB,EAAA,QAAA,IAAAnB,GAAA,MAAAa,EAAAO,QAAAP,EAAAO,SAAA,QAAA,GAAAnB,EAAA,MAAAC,MA9CO,CAAAlB,IAAA,UAAAQ,IAAA,WAyB1B,MAvBY,YAFc6B,UAAAvD,EAAAU,GAAAV,EAAA,CAsBCM,UAoD/B,OALAkD,OAAOb,iBAAiBvC,EAAOK,mBAAoB,WACjDgD,QAAQC,iBAAiB,IAAI1D,GAC7BA,EAAiB2D,gBAGZ3D,EA1EiB","file":"scroll-up.min.js","sourcesContent":["import Resolver from './resolver'\nimport Monitor from './monitor'\n\n/**\n * ----------------------------------------------------------------------------------\n * ScrollMonitor (v0.1.0): scroll-up.js\n * Licensed under MIT (https://github.com/swgrhck/scroll-monitor/blob/master/LICENSE)\n * ----------------------------------------------------------------------------------\n */\n\nconst ScrollUpResolver = (() => {\n\n  const VERSION = '0.1.0'\n\n  const Selectors = {\n    SCROLL_UP_MONITOR: '[data-monitor~=\"scroll-up\"]'\n  }\n\n  const Data = {\n    TOGGLE_CLASS: 'scrollUpClass'\n  }\n\n  const DataDefault = {\n    TOGGLE_CLASS: 'scroll-up'\n  }\n\n  const Events = {\n    SCROLL_UP: `scroll.up.${Resolver.NAMESPACE}`,\n    SCROLL_UP_OFF: `scroll.up.off.${Resolver.NAMESPACE}`,\n    DOM_CONTENT_LOADED: 'DOMContentLoaded'\n  }\n\n  class ScrollUpResolver extends Resolver {\n\n    static get VERSION() {\n      return VERSION\n    }\n\n    get eventTypes() {\n      return [Events.SCROLL_UP, Events.SCROLL_UP_OFF]\n    }\n\n    static _createEvent(type) {\n      if (document.documentMode) { // if IE\n        const event = document.createEvent('Event')\n        event.initEvent(type, false, false)\n        return event\n      } else {\n        return new Event(type)\n      }\n    }\n\n    /**\n     * Add class toggle event listeners those respond to events of {@link ScrollUpResolver} to subscribers by data attributes.\n     * This function can NOT be invoked repeatedly safely, event listeners will be registered repeatedly.\n     */\n    static _initByData() {\n      for (const subscriber of document.querySelectorAll(Selectors.SCROLL_UP_MONITOR)) {\n        const toggleClass = subscriber.dataset[Data.TOGGLE_CLASS] || DataDefault.TOGGLE_CLASS\n        subscriber.addEventListener(Events.SCROLL_UP, () => {\n          subscriber.classList.add(toggleClass)\n        })\n        subscriber.addEventListener(Events.SCROLL_UP_OFF, () => {\n          subscriber.classList.remove(toggleClass)\n        })\n      }\n    }\n\n    resolve(lastMetric, crtMetric) {\n      let lastTop = lastMetric.top\n      let crtTop = crtMetric.top\n      if (crtTop < lastTop) {\n        return ScrollUpResolver._createEvent(Events.SCROLL_UP)\n      } else {\n        return ScrollUpResolver._createEvent(Events.SCROLL_UP_OFF)\n      }\n    }\n  }\n\n  window.addEventListener(Events.DOM_CONTENT_LOADED, () => {\n    Monitor.registerResolver(new ScrollUpResolver())\n    ScrollUpResolver._initByData()\n  })\n\n  return ScrollUpResolver\n})()\n\nexport default ScrollUpResolver\n"]}