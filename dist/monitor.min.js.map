{"version":3,"sources":["../src/monitor.js"],"names":["Monitor","Selectors","Data","Events","ValidTargetTypes","Window","Element","MonitorMap","Map","Resolvers","Set","target","_classCallCheck","this","window","_checkTarget","has","get","destroy","_target","_subscribers","_scrollMetric","_resolveMetric","_boundEventListener","_onTargetScroll","bind","addEventListener","set","_createClass","key","value","subscriber","_checkSubscriber","add","delete","removeEventListener","event","lastMetric","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","resolvedEvent","resolve","Event","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","dispatchEvent","err","return","resolver","_checkResolver","forEach","monitor","clear","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","document","querySelectorAll","targetData","dataset","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","of","subscribe","metric","ScrollMetric","innerHeight","innerWidth","pageYOffset","pageXOffset","Error","scrollHeight","scrollWidth","scrollTop","scrollLeft","_i","length","concat","map","type","name","join","EventTarget","eventResolver","Resolver","height","width","top","left","_height","_width","_top","_left","_initByData"],"mappings":"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","file":"monitor.min.js","sourcesContent":["import Resolver from './resolver'\n\n/**\n * ----------------------------------------------------------------------------------\n * ScrollMonitor (v0.1.0): monitor.js\n * Licensed under MIT (https://github.com/swgrhck/scroll-monitor/blob/master/LICENSE)\n * ----------------------------------------------------------------------------------\n */\n\nconst Monitor = (() => {\n\n  const VERSION = '0.1.0'\n\n  const Selectors = {\n    SCROLL_MONITOR: '[data-monitor~=\"scroll\"]'\n  }\n\n  const Data = {\n    MONITOR_TARGET: 'monitorTarget'\n  }\n\n  const Events = {\n    SCROLL: 'scroll',\n    DOM_CONTENT_LOADED: 'DOMContentLoaded'\n  }\n\n  const ValidTargetTypes = [Window, Element]\n\n  const MonitorMap = new Map()\n  const Resolvers = new Set()\n\n  class Monitor {\n    /**\n     * This method will destroy the Monitor of the target if exists, then return a new one.\n     * Consider use {@link Monitor.of} instead.\n     * @param target the target of the monitor\n     * @throws when target is invalid\n     * @see Monitor.of\n     */\n    constructor(target) {\n      target = target || window\n      Monitor._checkTarget(target)\n\n      if (MonitorMap.has(target)) {\n        MonitorMap.get(target).destroy()\n      }\n\n      this._target = target\n      this._subscribers = new Set()\n      this._scrollMetric = Monitor._resolveMetric(target)\n      this._boundEventListener = this._onTargetScroll.bind(this)\n\n      this._target.addEventListener(Events.SCROLL, this._boundEventListener)\n      MonitorMap.set(target, this)\n    }\n\n    // Static\n\n    static get VERSION() {\n      return VERSION\n    }\n\n    /**\n     * Return the copy of the monitor map whose keys are targets and values are monitors\n     * @return {Map<Window | Element, Monitor>}\n     */\n    static get monitorMap() {\n      return new Map(MonitorMap)\n    }\n\n    /**\n     * Return the copy of a Set contains all registered resolvers\n     * @return {Set<Resolver>}\n     */\n    static get resolvers() {\n      return new Set(Resolvers)\n    }\n\n    /**\n     * Get the Monitor of the target.\n     * If the Monitor of the target exists, then return it.\n     * Otherwise, create a new Monitor for the target and return.\n     * @param target target of the monitor\n     * @throws when target is not valid\n     * @return {Monitor}\n     */\n    static of(target) {\n      Monitor._checkTarget(target)\n      if (MonitorMap.has(target)) {\n        return MonitorMap.get(target)\n      } else {\n        return new Monitor(target)\n      }\n    }\n\n    /**\n     * Register a new Resolver\n     * @param resolver should be an instance of {@link Resolver}\n     * @throws when resolver is not valid\n     */\n    static registerResolver(resolver) {\n      this._checkResolver(resolver)\n      Resolvers.add(resolver)\n    }\n\n    /**\n     * Unregister a resolver\n     * @param resolver the resolver should be unregistered\n     */\n    static unregisterResolver(resolver) {\n      Resolvers.delete(resolver)\n    }\n\n    /**\n     * Destroy all managed Monitors and unregister all Resolvers\n     */\n    static reset() {\n      MonitorMap.forEach(monitor => monitor.destroy())\n      Resolvers.clear()\n    }\n\n    /**\n     * Create monitors and add subscribers to monitors by data attributes.\n     * This function can be invoked repeatedly safely, subscribers will not be registered repeatedly.\n     */\n    static _initByData() {\n      for (const subscriber of document.querySelectorAll(Selectors.SCROLL_MONITOR)) {\n        const targetData = subscriber.dataset[Data.MONITOR_TARGET]\n        if (targetData) {\n          for (const target of document.querySelectorAll(targetData)) {\n            Monitor.of(target).subscribe(subscriber)\n          }\n        } else {\n          Monitor.of(window).subscribe(subscriber)\n        }\n      }\n    }\n\n    static _resolveMetric(target) {\n      let metric\n      if (target instanceof Window) {\n        metric = new ScrollMetric(target.innerHeight, target.innerWidth,\n          target.pageYOffset, target.pageXOffset)\n      } else if (target instanceof Element) {\n        metric = new ScrollMetric(target.scrollHeight, target.scrollWidth,\n          target.scrollTop, target.scrollLeft)\n      } else {\n        throw new Error('Can not resolve ScrollMetric')\n      }\n      return metric\n    }\n\n    static _checkTarget(target) {\n      for (const type of ValidTargetTypes) {\n        if (target instanceof type) {\n          return\n        }\n      }\n      throw new Error(`The target must be an instance of one in ${ValidTargetTypes.map(type => type.name).join(', ')}!`)\n    }\n\n    static _checkSubscriber(subscriber) {\n      if (!(subscriber instanceof EventTarget)) {\n        throw new Error('The subscriber must be an instance of EventTarget!')\n      }\n    }\n\n    static _checkResolver(eventResolver) {\n      if (!(eventResolver instanceof Resolver)) {\n        throw new Error('The resolver must be an instance of Resolver!')\n      }\n    }\n\n    // Public\n\n    /**\n     * Add a new subscriber to the Monitor.\n     * @param subscriber should be an instance of {@link EventTarget}\n     * @throws when subscriber is not valid\n     */\n    subscribe(subscriber) {\n      Monitor._checkSubscriber(subscriber)\n      this._subscribers.add(subscriber)\n    }\n\n    /**\n     * Remove a subscriber from the Monitor.\n     * @param subscriber the subscriber should be removed from the monitor\n     */\n    unsubscribe(subscriber) {\n      this._subscribers.delete(subscriber)\n    }\n\n    /**\n     * Destroy the Monitor.\n     * Once this method invoked, this Monitor would not be available anymore.\n     */\n    destroy() {\n      MonitorMap.delete(this._target)\n      this._target.removeEventListener(Events.SCROLL, this._boundEventListener)\n\n      this._target = null\n      this._subscribers = null\n      this._scrollMetric = null\n      this._boundEventListener = null\n    }\n\n    // Private\n\n    _onTargetScroll(event) {\n      const lastMetric = this._scrollMetric\n      this._scrollMetric = Monitor._resolveMetric(this._target)\n\n      for (const resolver of Resolvers) {\n        const resolvedEvent = resolver.resolve(lastMetric, this._scrollMetric, event)\n        if (resolvedEvent && resolvedEvent instanceof Event) {\n          for (const subscriber of this._subscribers) {\n            subscriber.dispatchEvent(resolvedEvent)\n          }\n        }\n      }\n    }\n\n  }\n\n  class ScrollMetric {\n    constructor(height, width, top, left) {\n      this._height = height\n      this._width = width\n      this._top = top\n      this._left = left\n    }\n\n    // Getter\n\n    get height() {\n      return this._height\n    }\n\n    get width() {\n      return this._width\n    }\n\n    get top() {\n      return this._top\n    }\n\n    get left() {\n      return this._left\n    }\n  }\n\n  window.addEventListener(Events.DOM_CONTENT_LOADED, () => {\n    Monitor._initByData()\n  })\n\n  return Monitor\n})()\n\nexport default Monitor\n"]}