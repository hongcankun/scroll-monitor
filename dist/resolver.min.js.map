{
  "version": 3, "sources": ["../src/resolver.js"], "names": [
  "Resolver", "_classCallCheck", "this", "_createClass", "key", "value", "lastMetric", "crtMetric", "event", "Error",
  "get"
],
  "mappings": ";;;;;sYAOA,IAAMA,SAAkB,WAAA,SAAAA,IAAAC,gBAAAC,KAAAF,GAAA,OAAAG,aAAAH,EAAA,CAAA,CAAAI,IAAA,UAAAC,MAAA,SAgCZC,EAAYC,EAAWC,GAC7B,MAAM,IAAIC,MAAM,4FAjCE,CAAAL,IAAA,aAAAM,IAAA,eAAA,CAAA,CAAAN,IAAA,UAAAM,IAAA,WASlB,MAPY,UAFM,CAAAN,IAAA,YAAAM,IAAA,WAalB,MAVoB,qBAHFV,EAAA",
  "file": "resolver.min.js", "sourcesContent": [
  "/**\n * ----------------------------------------------------------------------------------\n * ScrollMonitor (v0.1.0): resolver.js\n * Licensed under MIT (https://github.com/swgrhck/scroll-monitor/blob/master/LICENSE)\n * ----------------------------------------------------------------------------------\n */\n\nconst Resolver = (() => {\n\n  const VERSION = '0.1.0'\n  const EVENT_NAMESPACE = 'scroll-monitor'\n\n  class Resolver {\n    // Getter\n\n    static get VERSION() {\n      return VERSION\n    }\n\n    static get NAMESPACE() {\n      return EVENT_NAMESPACE\n    }\n\n    /**\n     * Return an array of event types this revolver will generate\n     */\n    get eventTypes() {\n    }\n\n    // Public\n\n    /**\n     * Resolve metrics and event received from Monitor and\n     * return a new resolved Event which should be dispatched to subscribers of Monitor\n     * @param lastMetric last scroll metric\n     * @param crtMetric current scroll metric\n     * @param event the scroll event that monitor received\n     * @return {Event}\n     */\n    resolve(lastMetric, crtMetric, event) { // eslint-disable-line no-unused-vars\n      throw new Error('Method is not implemented. Instance must override this method to resolve scroll event!')\n    }\n  }\n\n  return Resolver\n})()\n\nexport default Resolver\n"
]
}
